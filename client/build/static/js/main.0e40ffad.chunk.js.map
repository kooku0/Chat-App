{"version":3,"sources":["store/socketIO/reducer.ts","store/login/actions.ts","store/rooms/actions.ts","store/login/index.ts","constants.ts","pages/Signin/index.tsx","hooks/useLogin.ts","components/ListHeader/index.tsx","components/RoomItem/index.tsx","hooks/useName.ts","components/ListBody/index.tsx","hooks/useRooms.ts","pages/RoomList/index.tsx","hooks/useEnterRoom.ts","hooks/useUpdateRooms.ts","components/ChatMenu/index.tsx","components/ChatHeader/index.tsx","components/ChatItem/index.tsx","utils/parseDateToString.ts","components/ChatBody/index.tsx","utils/scrollToBottom.ts","components/ChatFooter/index.tsx","hooks/useInput.ts","pages/ChatRoom/index.tsx","hooks/useMessages.ts","hooks/useRoomInfo.ts","hooks/useMessageActions.ts","App.tsx","store/index.ts","index.tsx","store/rooms/index.ts","store/messages/actions.ts","store/messages/index.ts","store/socketIO/actions.ts","store/socketIO/index.ts","store/login/reducer.ts","store/rooms/reducer.ts","store/messages/reducer.ts"],"names":["initialState","endPoint","socket","socketIO","state","action","type","CONNECT_SERVER","socketIOClient","payload","LOAD_LOGIN","FAIL_LOGIN","SUCCESS_LOGIN","LOGOUT","loadLogin","failLogin","successLogin","name","socketId","logout","ADD_ROOM","REMOVE_ROOM","JOIN_ROOM","SET_ROOMS","setRooms","rooms","STORES","PAGE_PATHS","Signin","history","onLogin","useSelector","dispatch","useDispatch","emit","id","on","e","error","console","log","onLogout","useLogin","useState","value","setValue","className","onSubmit","preventDefault","stopPropagation","push","placeholder","onChange","target","href","ListHeader","roomName","onKeyDown","toggleCheck","RoomItem","members","active","status","to","src","toString","length","useName","login","ListBody","filterRoomId","joinedRoomFlag","onClick","useEffect","filter","room","roomId","includes","find","member","map","key","RoomList","checkValue","onEnterRoom","useEnterRoom","useUpdateRooms","handleCheckBox","useCallback","checked","handleClick","keyCode","ChatMenu","ChatHeader","roomInfo","ChatItem","writer","message","date","toLocaleTimeString","hour","minute","hour12","parseDateToString","ChatBody","messages","obj","document","getElementsByClassName","scrollTop","scrollHeight","scrollToBottom","msgId","ChatFooter","inputActions","defaultValue","requestFunc","func","useInput","sendMessage","ChatRoom","match","params","undefined","useMessages","useRoomInfo","generate","Date","recieveMessage","addMessage","addMsgToStore","socketOff","off","useMessageActions","App","connectServer","path","SIGNIN","component","Login","ROOM_LIST","CHAT","from","rootReducer","combineReducers","store","createStore","ReactDOM","render","getElementById","ADD_MESSAGE","DELETE_MESSAGE","REMOVE_ROOM_MSG","isLoading","isLogin","nextId","concat","roomIdx","findIndex","msg"],"mappings":"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","file":"static/js/main.0e40ffad.chunk.js","sourcesContent":["import { CONNECT_SERVER } from './actions'\r\nimport { SocketIOState, socketIOAction } from './types'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nconst initialState: SocketIOState = {\r\n  endPoint: '',\r\n  socket: null,\r\n}\r\n\r\nfunction socketIO(state: SocketIOState = initialState, action: socketIOAction) {\r\n  switch (action.type) {\r\n    case CONNECT_SERVER:\r\n      const socket = socketIOClient(action.payload)\r\n      return {\r\n        endPoint: action.payload,\r\n        socket: socket,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default socketIO\r\n","export const LOAD_LOGIN = 'login/LOAD_LOGIN' as const\r\nexport const FAIL_LOGIN = 'login/FAIL_LOGIN' as const\r\nexport const SUCCESS_LOGIN = 'login/SUCCESS_LOGIN' as const\r\nexport const LOGOUT = 'login/LOGOUT' as const\r\n\r\nexport const loadLogin = () => ({ type: LOAD_LOGIN })\r\nexport const failLogin = () => ({ type: FAIL_LOGIN })\r\nexport const successLogin = (name: string, socketId: string) => ({\r\n  type: SUCCESS_LOGIN,\r\n  payload: {\r\n    name: name,\r\n    socketId: socketId,\r\n  },\r\n})\r\nexport const logout = () => ({ type: LOGOUT })\r\n","import { RoomsState, Member } from './types'\r\n\r\nexport const ADD_ROOM = 'rooms/ADD_ROOM' as const\r\nexport const REMOVE_ROOM = 'rooms/REMOVE_ROOM' as const\r\nexport const JOIN_ROOM = 'rooms/JOIN_ROOM' as const\r\nexport const SET_ROOMS = 'rooms/SET_ROOMS' as const\r\n\r\nexport const addRoom = (member: Member) => ({\r\n  type: ADD_ROOM,\r\n  payload: member,\r\n})\r\nexport const removeRoom = (roomId: string) => ({\r\n  type: REMOVE_ROOM,\r\n  payload: roomId,\r\n})\r\nexport const joinRoom = (roomId: string, socketId: string, name: string) => ({\r\n  type: JOIN_ROOM,\r\n  payload: {\r\n    roomId: roomId,\r\n    socketId: socketId,\r\n    name: name,\r\n  },\r\n})\r\nexport const setRooms = (rooms: RoomsState) => ({\r\n  type: SET_ROOMS,\r\n  payload: rooms,\r\n})\r\n","export { default } from './reducer'\r\nexport * from './actions'\r\nexport * from './types'\r\n","export enum STORES {\r\n  LOGIN_STORE = 'authStore',\r\n  SOCKETIO_STORE = 'socketIOStore',\r\n  MESSAGES_STORE = 'messagesStore',\r\n  ROOMS_STORE = 'roomsStore',\r\n}\r\n\r\nexport enum PAGE_PATHS {\r\n  SIGNUP = '/signup',\r\n  SIGNIN = '/signin',\r\n  ROOM_LIST = '/room-list',\r\n  CHAT = '/chat/:id',\r\n}\r\n","import React, { ChangeEvent, FormEvent, useState } from 'react'\r\nimport useLogin from '../../hooks/useLogin'\r\n\r\nimport './style.scss'\r\n\r\nfunction Signin({ history }: any) {\r\n  const { onLogin } = useLogin()\r\n  const [value, setValue] = useState('')\r\n\r\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.target.value)\r\n  }\r\n  const onSubmit = (e: FormEvent) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    onLogin(value)\r\n    setValue('')\r\n    history.push('/room-list')\r\n  }\r\n  return (\r\n    <>\r\n      {/* <TopBar /> */}\r\n      <div className=\"col-md-8 col-xl-6 chat\">\r\n        <div className=\"card container-sm container-sign\">\r\n          <form className=\"form-sign\" onSubmit={onSubmit}>\r\n            <h5 className=\"form-headline\">💬 로그인 💌</h5>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"닉네임 입력\"\r\n                value={value}\r\n                onChange={onChange}\r\n              />\r\n            </div>\r\n            <button className=\"btn btn-block btn-primary\">로그인 하기</button>\r\n            <h6 className=\"txt-terms\">\r\n              <a href=\"#\">이용약관</a> 및 <a href=\"#\">개인정보</a> 취급방침\r\n            </h6>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Signin\r\n","import { useSelector, useDispatch } from 'react-redux'\r\nimport { RootState } from '../store'\r\nimport { loadLogin, failLogin, logout, successLogin } from '../store/login'\r\nimport { RoomsState } from '../store/rooms'\r\nimport { setRooms } from '../store/rooms'\r\n\r\nexport default function useLogin() {\r\n  const socket = useSelector((state: RootState) => state.socketIO.socket)\r\n  const dispatch = useDispatch()\r\n  const onLogin = (name: string) => {\r\n    dispatch(loadLogin())\r\n    socket?.emit('login', name, (rooms: RoomsState) => {\r\n      dispatch(successLogin(name, socket.id))\r\n      dispatch(setRooms(rooms))\r\n    })\r\n    socket?.on('error', function(e: ErrorEvent) {\r\n      if (e.error() != 'websocket: close sent') {\r\n        console.log('An unexpected error occured: ', e.error())\r\n        dispatch(failLogin())\r\n      }\r\n    })\r\n  }\r\n  function onLogout() {\r\n    dispatch(logout())\r\n  }\r\n  return {\r\n    onLogin,\r\n    onLogout,\r\n  }\r\n}\r\n","import React, { ChangeEvent } from 'react'\r\n\r\nimport './style.scss'\r\n\r\ninterface ListHeaderProps {\r\n  roomName: string\r\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void\r\n  onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void\r\n  // checked: boolean\r\n  toggleCheck: (event: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nfunction ListHeader({ roomName, onChange, onKeyDown, toggleCheck }: ListHeaderProps) {\r\n  return (\r\n    <div className=\"card-header\">\r\n      <div className=\"input-group\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"채팅방 추가 및 참여\"\r\n          name=\"\"\r\n          className=\"form-control search\"\r\n          value={roomName}\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n        />\r\n        <div className=\"input-group-prepend\">\r\n          <span className=\"input-group-text search_btn\">\r\n            {/* <i className=\"fas fa-search\"></i> */}\r\n            <i className=\"fas fa-plus\"></i>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <span>\r\n        <input type=\"checkbox\" onChange={toggleCheck} />\r\n        <i>참여 중인 방만 보기</i>\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListHeader\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Member } from '../../store/rooms'\r\n\r\ninterface RoomItemProps {\r\n  id: string\r\n  members: Member[]\r\n  active: Boolean\r\n  status: Boolean\r\n}\r\n\r\nfunction RoomItem({ id, members, active, status }: RoomItemProps) {\r\n  return (\r\n    <Link to={`/chat/${id}`}>\r\n      <li className={active ? 'active' : ''}>\r\n        <div className=\"d-flex bd-highlight\">\r\n          <div className=\"img_cont\">\r\n            <img\r\n              src=\"https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg\"\r\n              className=\"rounded-circle user_img\"\r\n            />\r\n            <span className={`online_icon ${status ? '' : 'offline'}`} />\r\n          </div>\r\n          <div className=\"user_info\">\r\n            <span>{id.toString()}</span>\r\n            <p>{`${members.length}명 참가중`}</p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default RoomItem\r\n","import { useSelector } from 'react-redux'\r\nimport { RootState } from '../store'\r\n\r\nexport default function useName(): string {\r\n  const { name } = useSelector((state: RootState) => state.login)\r\n  return name\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport RoomItem from '../../components/RoomItem'\r\nimport useRooms from '../../hooks/useRooms'\r\nimport useName from '../../hooks/useName'\r\n\r\ninterface ListBodyProps {\r\n  filterRoomId: string\r\n  joinedRoomFlag: Boolean\r\n  onClick: (roomId: string) => void\r\n}\r\n\r\nfunction ListBody({ filterRoomId, joinedRoomFlag, onClick }: ListBodyProps) {\r\n  const rooms = useRooms()\r\n  const name = useName()\r\n  useEffect(() => {}, [rooms, joinedRoomFlag])\r\n  return (\r\n    <div className=\"card-body contacts_body\">\r\n      <div className=\"contacts\">\r\n        {rooms\r\n          .filter(room => room.roomId.includes(filterRoomId))\r\n          .filter(room =>\r\n            joinedRoomFlag ? room.members.find(member => member.name === name) : true,\r\n          )\r\n          .map(room => (\r\n            <div key={room.roomId} onClick={() => onClick(room.roomId)}>\r\n              <RoomItem id={room.roomId} members={room.members} active={false} status={false} />\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListBody\r\n","import { useSelector } from 'react-redux'\r\nimport { RootState } from '../store'\r\n\r\nimport { Room } from '../store/rooms'\r\n\r\nexport default function useRooms(): Room[] {\r\n  const rooms = useSelector((state: RootState) => state.rooms)\r\n  return rooms\r\n}\r\n","import React, { useState, ChangeEvent, KeyboardEvent, useCallback } from 'react'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport ListHeader from '../../components/ListHeader'\r\nimport ListBody from '../../components/ListBody'\r\nimport useUpdateRooms from '../../hooks/useUpdateRooms'\r\nimport useEnterRoom from '../../hooks/useEnterRoom'\r\n\r\nimport './style.scss'\r\n\r\nfunction RoomList({ history }: RouteComponentProps) {\r\n  const [value, setValue] = useState('')\r\n  const [checkValue, toggleCheck] = useState(false)\r\n  const onEnterRoom = useEnterRoom()\r\n  useUpdateRooms()\r\n  const handleChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(target.value)\r\n  }\r\n  const handleKeyDown = ({ keyCode }: KeyboardEvent) => {\r\n    if (keyCode === 13 && value !== '') {\r\n      onEnterRoom(value)\r\n      history.push(`/chat/${value}`)\r\n      setValue('')\r\n    }\r\n  }\r\n  const handleCheckBox = useCallback(({ target }: ChangeEvent<HTMLInputElement>) => {\r\n    toggleCheck(target.checked)\r\n  }, [])\r\n  const handleClick = useCallback((roomId: string) => onEnterRoom(roomId), [])\r\n  return (\r\n    <div className=\"col-md-4 col-xl-3 chat\">\r\n      <div className=\"card mb-sm-3 mb-md-0 contacts_card\">\r\n        <ListHeader\r\n          roomName={value}\r\n          onChange={handleChange}\r\n          onKeyDown={handleKeyDown}\r\n          // checked={checkValue}\r\n          toggleCheck={handleCheckBox}\r\n        />\r\n        <ListBody filterRoomId={value} onClick={handleClick} joinedRoomFlag={checkValue} />\r\n        <div className=\"card-footer\"></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RoomList\r\n","import { useSelector } from 'react-redux'\r\nimport { RootState } from '../store'\r\n\r\nexport default function useEnterRoom(): (roomNumber: string) => void {\r\n  const socket = useSelector((state: RootState) => state.socketIO.socket)\r\n  const onEnterRoom = (roomName: string) => {\r\n    socket?.emit('enter-room', roomName)\r\n  }\r\n  return onEnterRoom\r\n}\r\n","import { useDispatch, useSelector } from 'react-redux'\r\nimport { RoomsState, setRooms } from '../store/rooms'\r\nimport { RootState } from '../store'\r\n\r\nexport default function useUpdateRooms() {\r\n  const dispatch = useDispatch()\r\n  const socket = useSelector((state: RootState) => state.socketIO.socket)\r\n\r\n  socket?.on('update-room-list', (rooms: RoomsState) => {\r\n    dispatch(setRooms(rooms))\r\n  })\r\n}\r\n","import React from 'react'\r\n\r\nfunction ChatMenu() {\r\n  return (\r\n    <div className=\"action_menu\">\r\n      <ul>\r\n        <li>\r\n          <i className=\"fas fa-user-circle\"></i> View profile\r\n        </li>\r\n        <li>\r\n          <i className=\"fas fa-users\"></i> Add to close friends\r\n        </li>\r\n        <li>\r\n          <i className=\"fas fa-plus\"></i> Add to group\r\n        </li>\r\n        <li>\r\n          <i className=\"fas fa-ban\"></i> Block\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatMenu\r\n","import React from 'react'\r\nimport ChatMenu from '../ChatMenu'\r\nimport { Room } from '../../store/rooms'\r\n\r\nimport './style.scss'\r\n\r\ninterface ChatHeaderProps {\r\n  roomInfo?: Room\r\n}\r\n\r\nfunction ChatHeader({ roomInfo }: ChatHeaderProps) {\r\n  return (\r\n    <div className=\"card-header msg_head\">\r\n      <div className=\"d-flex bd-highlight\">\r\n        <div className=\"img_cont\">\r\n          <img\r\n            src=\"https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg\"\r\n            className=\"rounded-circle user_img\"\r\n          />\r\n          <span className=\"online_icon\"></span>\r\n        </div>\r\n        <div className=\"user_info\">\r\n          <span>{roomInfo?.roomId}</span>\r\n          <p>{`${roomInfo?.members.length}명 참가중`}</p>\r\n        </div>\r\n      </div>\r\n      <span id=\"action_menu_btn\">\r\n        <i className=\"fas fa-ellipsis-v\"></i>\r\n      </span>\r\n      <ChatMenu />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatHeader\r\n","import React from 'react'\r\nimport useName from '../../hooks/useName'\r\nimport parseDateToString from '../../utils/parseDateToString'\r\n\r\nimport './style.scss'\r\n\r\ninterface ChatItemProps {\r\n  writer: string\r\n  message: string\r\n  date: Date\r\n}\r\n\r\nfunction ChatItem({ writer, message, date }: ChatItemProps) {\r\n  const name = useName()\r\n  return (\r\n    <div className={`d-flex justify-content-${writer !== name ? 'start' : 'end'} mb-4`}>\r\n      {writer !== name ? (\r\n        <div className=\"img_cont_msg\">\r\n          <img\r\n            src=\"https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg\"\r\n            className=\"rounded-circle user_img_msg\"\r\n          />\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n      {writer !== name ? (\r\n        <div className=\"msg_writer\">\r\n          <span>{writer}</span>\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n      <div className={`msg_box msg_cotainer${writer !== name ? '' : '_send'}`}>\r\n        {message}\r\n        <span className=\"msg_time\">{parseDateToString(date)}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatItem\r\n","export default function parseDateToString(date: Date): string {\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport ChatItem from '../../components/ChatItem'\r\nimport { Message } from '../../store/messages'\r\nimport scrollToBottom from '../../utils/scrollToBottom'\r\n\r\ninterface ChatBodyProps {\r\n  messages: Message[]\r\n}\r\n\r\nfunction ChatBody({ messages }: ChatBodyProps) {\r\n  useEffect(() => {\r\n    scrollToBottom('card-body')\r\n  }, [messages.length])\r\n  return (\r\n    <div className=\"card-body msg_card_body\">\r\n      {messages.map(({ msgId, writer, message, date }) => (\r\n        <ChatItem key={msgId} writer={writer} message={message} date={date} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatBody\r\n","export default function scrollToBottom(className: string) {\r\n  const obj = document.getElementsByClassName(className)[0]\r\n  obj.scrollTop = obj.scrollHeight\r\n}\r\n","import React from 'react'\r\nimport useInput from '../../hooks/useInput'\r\n\r\nimport './style.scss'\r\n\r\ninterface ChatFooterProps {\r\n  sendMessage: (msg: string) => void\r\n  addMsgToStore: (msg: string) => void\r\n}\r\n\r\nfunction ChatFooter({ sendMessage }: ChatFooterProps) {\r\n  const inputActions = useInput('', [sendMessage])\r\n  return (\r\n    <div className=\"card-footer\">\r\n      <div className=\"input-group\">\r\n        <div className=\"input-group-append\">\r\n          <span className=\"input-group-text attach_btn\">\r\n            <i className=\"fas fa-paperclip\"></i>\r\n          </span>\r\n        </div>\r\n        <input\r\n          className=\"form-control type_msg\"\r\n          placeholder=\"Type your message...\"\r\n          {...inputActions}\r\n        />\r\n        <div className=\"input-group-append\">\r\n          <span className=\"input-group-text send_btn\">\r\n            <i className=\"fas fa-location-arrow\"></i>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatFooter\r\n","import { useState, ChangeEvent, KeyboardEvent } from 'react'\r\n\r\nexport default function useInput(defaultValue: string, requestFunc: Function[]) {\r\n  const [value, setValue] = useState(defaultValue)\r\n\r\n  const onChange = ({ target }: ChangeEvent<HTMLInputElement>) => setValue(target.value)\r\n  const onKeyDown = ({ keyCode }: KeyboardEvent) => {\r\n    if (keyCode === 13 && value !== '') {\r\n      for (let func of requestFunc) {\r\n        func(value)\r\n      }\r\n      setValue('')\r\n    }\r\n  }\r\n  return { value, onChange, onKeyDown }\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport ChatHeader from '../../components/ChatHeader'\r\nimport ChatBody from '../../components/ChatBody'\r\nimport ChatFooter from '../../components/ChatFooter'\r\nimport useMessages from '../../hooks/useMessages'\r\nimport useRoomInfo from '../../hooks/useRoomInfo'\r\nimport useMessageActions from '../../hooks/useMessageActions'\r\n\r\nimport './style.scss'\r\n\r\nfunction ChatRoom({ match }: RouteComponentProps<{ id: string }>) {\r\n  const roomId = match.params?.id\r\n  const messages = useMessages(roomId)\r\n  const roomInfo = useRoomInfo(roomId)\r\n  const { recieveMessage, sendMessage, addMsgToStore, socketOff } = useMessageActions(roomId)\r\n  useEffect(() => {\r\n    recieveMessage()\r\n    return function cleanup() {\r\n      socketOff()\r\n    }\r\n  }, [])\r\n  return (\r\n    <div className=\"col-md-8 col-xl-6 chat\">\r\n      <div className=\"card\">\r\n        <ChatHeader roomInfo={roomInfo} />\r\n        <ChatBody messages={messages} />\r\n        <ChatFooter sendMessage={sendMessage} addMsgToStore={addMsgToStore} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatRoom\r\n","import { useSelector } from 'react-redux'\r\nimport { RootState } from '../store'\r\n\r\nimport { Message } from '../store/messages'\r\n\r\nexport default function useMessages(roomId: string): Message[] {\r\n  const messages = useSelector((state: RootState) => state.messages).find(\r\n    room => room.roomId === roomId,\r\n  )\r\n  if (messages === undefined) return []\r\n  else return messages.messages\r\n}\r\n","import { useSelector } from 'react-redux'\r\nimport { RootState } from '../store'\r\n\r\nimport { Room } from '../store/rooms'\r\n\r\nexport default function useRoomInfo(roomId: string): Room | undefined {\r\n  const roomInfo = useSelector((state: RootState) => state.rooms).find(\r\n    room => room.roomId === roomId,\r\n  )\r\n  return roomInfo\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootState } from '../store'\r\nimport { addMessage } from '../store/messages'\r\nimport useName from './useName'\r\nimport { generate } from 'randomstring'\r\n\r\nexport default function useMessageActions(roomId: string) {\r\n  const dispatch = useDispatch()\r\n  const socket = useSelector((state: RootState) => state.socketIO.socket)\r\n  const writer = useName()\r\n  const sendMessage = useCallback(\r\n    (message: string) =>\r\n      socket?.emit('send:message', {\r\n        roomId: roomId,\r\n        msgId: generate(12),\r\n        writer: writer,\r\n        message: message,\r\n        date: new Date(),\r\n      }),\r\n    [],\r\n  )\r\n  const recieveMessage = useCallback(\r\n    () =>\r\n      socket?.on('rcv:message', (message: any) => {\r\n        dispatch(\r\n          addMessage(\r\n            message.roomId,\r\n            message.msgId,\r\n            message.writer,\r\n            message.message,\r\n            new Date(message.date),\r\n          ),\r\n        )\r\n      }),\r\n    [socket, dispatch],\r\n  )\r\n  const addMsgToStore = useCallback(\r\n    (message: string) => dispatch(addMessage(roomId, generate(12), writer, message, new Date())),\r\n    [dispatch],\r\n  )\r\n  const socketOff = useCallback(() => socket?.off('rcv:message'), [socket])\r\n  return {\r\n    socketOff,\r\n    sendMessage,\r\n    recieveMessage,\r\n    addMsgToStore,\r\n  }\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\r\nimport { PAGE_PATHS } from './constants'\r\nimport Login from './pages/Signin'\r\nimport RoomList from './pages/RoomList'\r\nimport ChatRoom from './pages/ChatRoom'\r\nimport { connectServer } from './store/socketIO'\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(connectServer('http://localhost:5000'))\r\n  }, [])\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className=\"row justify-content-center h-100\">\r\n        <Router>\r\n          <Switch>\r\n            <Route path={PAGE_PATHS.SIGNIN} component={Login} />\r\n            <Route path={PAGE_PATHS.ROOM_LIST} component={RoomList} />\r\n            <Route path={PAGE_PATHS.CHAT} component={ChatRoom} />\r\n          </Switch>\r\n          <Redirect from=\"/\" to={PAGE_PATHS.SIGNIN} />\r\n        </Router>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { combineReducers } from 'redux'\r\nimport messages from './messages'\r\nimport socketIO from './socketIO'\r\nimport login from './login'\r\nimport rooms from './rooms'\r\n\r\nconst rootReducer = combineReducers({\r\n  messages,\r\n  socketIO,\r\n  login,\r\n  rooms,\r\n})\r\n\r\nexport default rootReducer\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport rootReducer from './store'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport './css/style.scss'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n","export { default } from './reducer'\r\nexport * from './actions'\r\nexport * from './types'\r\n","export const ADD_MESSAGE = 'messages/ADD_MESSAGE' as const\r\nexport const DELETE_MESSAGE = 'messages/DELETE_MESSAGE' as const\r\nexport const REMOVE_ROOM_MSG = 'messages/REMOVE_ROOM_MSG' as const\r\n\r\nexport const addMessage = (\r\n  roomId: string,\r\n  msgId: string,\r\n  writer: string,\r\n  message: string,\r\n  date: Date,\r\n) => ({\r\n  type: ADD_MESSAGE,\r\n  payload: {\r\n    roomId: roomId,\r\n    msgId: msgId,\r\n    writer: writer,\r\n    message: message,\r\n    date: date,\r\n  },\r\n})\r\nexport const deleteMessage = (roomId: string, msgId: string) => ({\r\n  type: DELETE_MESSAGE,\r\n  payload: {\r\n    roomId: roomId,\r\n    msgId: msgId,\r\n  },\r\n})\r\nexport const removeRoomMsg = (roomId: string) => ({\r\n  type: REMOVE_ROOM_MSG,\r\n  payload: roomId,\r\n})\r\n","export { default } from './reducer'\r\nexport * from './actions'\r\nexport * from './types'\r\n","export const CONNECT_SERVER = 'socket/CONNECT_SERVER' as const\r\n\r\nexport const connectServer = (endPoint: string) => ({\r\n  type: CONNECT_SERVER,\r\n  payload: endPoint,\r\n})\r\n","export { default } from './reducer'\r\nexport * from './actions'\r\nexport * from './types'\r\n","import { LOAD_LOGIN, FAIL_LOGIN, SUCCESS_LOGIN, LOGOUT } from './actions'\r\nimport { LoginState, LoginAction } from './types'\r\n\r\nconst initialState: LoginState = {\r\n  isLoading: false,\r\n  isLogin: false,\r\n  socketId: '',\r\n  name: '',\r\n}\r\n\r\nfunction login(state: LoginState = initialState, action: LoginAction) {\r\n  switch (action.type) {\r\n    case LOAD_LOGIN:\r\n      return {\r\n        isLoading: true,\r\n        isLogin: false,\r\n        name: '',\r\n      }\r\n    case FAIL_LOGIN:\r\n      return initialState\r\n    case SUCCESS_LOGIN:\r\n      return {\r\n        isLoading: false,\r\n        isLogin: true,\r\n        socketId: action.payload.socketId,\r\n        name: action.payload.name,\r\n      }\r\n    case LOGOUT:\r\n      return {\r\n        isLogin: false,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default login\r\n","import { ADD_ROOM, REMOVE_ROOM, JOIN_ROOM, SET_ROOMS } from './actions'\r\nimport { RoomsState, RoomsAction } from './types'\r\n\r\nconst initialState: RoomsState = []\r\n\r\nfunction rooms(state: RoomsState = initialState, action: RoomsAction) {\r\n  switch (action.type) {\r\n    case ADD_ROOM:\r\n      const nextId = 'asfd'\r\n      return state.concat({\r\n        roomId: nextId,\r\n        members: [action.payload],\r\n      })\r\n    case REMOVE_ROOM:\r\n      return state.filter(room => room.roomId !== action.payload)\r\n    case JOIN_ROOM:\r\n      return state.map(room =>\r\n        room.roomId === action.payload.roomId\r\n          ? {\r\n              ...room,\r\n              member: room.members.push({\r\n                socketId: action.payload.socketId,\r\n                name: action.payload.name,\r\n              }),\r\n            }\r\n          : room,\r\n      )\r\n    case SET_ROOMS:\r\n      return [...action.payload]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default rooms\r\n","import { ADD_MESSAGE, DELETE_MESSAGE, REMOVE_ROOM_MSG } from './actions'\r\nimport { MessagesState, MessagesAction } from './types'\r\n\r\nconst initialState: MessagesState = []\r\n\r\nfunction messages(state: MessagesState = initialState, action: MessagesAction): MessagesState {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      let { roomId } = action.payload\r\n      let roomIdx = state.findIndex(room => room.roomId === roomId)\r\n      delete action.payload['roomId']\r\n      if (roomIdx === -1) {\r\n        state.push({\r\n          roomId: roomId,\r\n          messages: [action.payload],\r\n        })\r\n      } else {\r\n        state[roomIdx].messages.push(action.payload)\r\n      }\r\n      return [...state]\r\n    case DELETE_MESSAGE:\r\n      roomIdx = state.findIndex(room => room.roomId === action.payload.roomId)\r\n      state[roomIdx].messages.filter(msg => msg.msgId !== action.payload.msgId)\r\n      return [...state]\r\n    case REMOVE_ROOM_MSG:\r\n      return state.filter(room => room.roomId !== action.payload)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default messages\r\n"],"sourceRoot":""}